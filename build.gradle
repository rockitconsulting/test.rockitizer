import org.gradle.plugins.ide.eclipse.model.AccessRule


plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'jacoco'
}

repositories {
    mavenLocal()
    mavenCentral()
 }



/*
jacoco {
    toolVersion = "0.8.5"
}



jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
*/

/*
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['io.github.*','com.rockit.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
*/


test {
      description = 'Run all SmallTests'
      jvmArgs '-XX:MaxPermSize=256m'
      minHeapSize = "512m" 
      maxHeapSize = "512m"
      include "**/*Test.class"
      exclude '**/*Integration.class'
      exclude '**/*IntegrationTest.class'
      exclude '**/*IT.class'
}

eclipse {
    classpath {
    
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', '**/rowset/**'))
                jre.accessRules.add(new AccessRule('0', 'com/**'))
                jre.accessRules.add(new AccessRule('0', 'sun/**'))
            }
        }
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation 'com.oracle.ojdbc:ojdbc8_g:19.3.0.0'
    implementation 'com.ibm.db2.jcc:db2jcc:db2jcc4'
    implementation 'com.ibm.mq:com.ibm.mq.allclient:9.1.4.0'
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'junit:junit:4.12'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-1.2-api:2.17.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.xmlunit:xmlunit-core:2.1.0'  
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'com.jcraft:jsch:0.1.54'
    implementation 'commons-io:commons-io:2.11.0'	
    implementation 'org.json:json:20240303' //for newer version the null key for responseCode by HTTPConnector#urlConnection.getHeaderFields() makes problems //TODO migration + junit       
    implementation 'org.apache.commons:commons-text:1.11.0'     
    implementation 'info.picocli:picocli:4.2.0'
    implementation 'org.fusesource.jansi:jansi:1.18'
    implementation 'org.apache.commons:commons-configuration2:2.7'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    implementation 'org.hamcrest:hamcrest-core:2.2'
}




group = 'io.github.rockitconsulting'
version = project.hasProperty('projVersion') ? project.projVersion :'1.0.6.0'
System.out.println("---->" + version)
sourceCompatibility = '1.8'
targetCompatibility = '1.8'


task createFatJar(type: Jar) {
    manifest {
        //attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    archiveBaseName = 'test.rockitizer-fat'
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
